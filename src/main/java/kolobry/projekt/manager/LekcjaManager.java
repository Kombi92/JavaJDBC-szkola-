package kolobry.projekt.manager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import kolobry.projekt.mejwen.Lekcja;

public class LekcjaManager {

	private Connection connection;

	private final String URL = "jdbc:hsqldb:hsql://localhost/";
	private final String USERNAME = "konrad";
	private final String PASSWORD = "lol";

	private String createTableLekcja = "CREATE TABLE Lekcja (idLekcja BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY,"
										+"rodzaj VARCHAR(20) NOT NULL,"
										+"ilosc_godzin VARCHAR(4) NOT NULL);";

	private PreparedStatement addLekcjaStmt;
	private PreparedStatement deleteAllLekcjaStmt;
	private PreparedStatement getAllLekcjaStmt;
	private PreparedStatement deleteLekcjaStmt;

	private Statement statement;

	public LekcjaManager() {
		try {
			connection = DriverManager.getConnection(URL,USERNAME,PASSWORD);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Lekcja".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableLekcja);

			addLekcjaStmt = connection
					.prepareStatement("INSERT INTO Lekcja (rodzaj,ilosc_godzin) VALUES (?, ?)");
			deleteAllLekcjaStmt = connection
					.prepareStatement("DELETE FROM Lekcja");
			deleteLekcjaStmt = connection
					.prepareStatement("DELETE FROM Lekcja WHERE idLekcja= ? ");
			getAllLekcjaStmt = connection
					.prepareStatement("SELECT * FROM Lekcja");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void clearLekcja() {
		try {
			deleteAllLekcjaStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void clearLekcja(long aj) {
		try {
			deleteLekcjaStmt.setLong(1, aj);
			deleteLekcjaStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addLekcja(Lekcja Lekcja) {
		int count = 0;
		try {
			addLekcjaStmt.setString(1, Lekcja.getRodzaj());
			addLekcjaStmt.setString(2, Lekcja.getGodz());

			count = addLekcjaStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Lekcja> getAllLekcja() {
		List<Lekcja> Lekcje = new ArrayList<Lekcja>();

		try {
			ResultSet rs = getAllLekcjaStmt.executeQuery();

			while (rs.next()) {
				Lekcja l = new Lekcja();
				l.setLekcja(rs.getInt("idLekcja"));
				l.setRodzaj(rs.getString("rodzaj"));
				l.setGodz(rs.getString("ilosc_godzin"));
				Lekcje.add(l);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Lekcje;
	}

}
